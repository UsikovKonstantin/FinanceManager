// <auto-generated />
using System;
using FinanceManager.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinanceManager.Persistence.Migrations
{
    [DbContext(typeof(FinanceManagerDatabaseContext))]
    [Migration("20240117081934_TokenMigration")]
    partial class TokenMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinanceManager.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", t =>
                        {
                            t.HasCheckConstraint("CK_Category_Type", "[Type] IN ('I', 'E', 'B')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Заработная плата",
                            Type = "I"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Премия",
                            Type = "I"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Пенсия",
                            Type = "I"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Продуктовый магазин",
                            Type = "E"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Хозтовары",
                            Type = "E"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Подписка на музыкальный сервис",
                            Type = "E"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Магазин электроники",
                            Type = "E"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Магазин сантехники",
                            Type = "E"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Кафе/Ресторан",
                            Type = "E"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Услуги ЖКХ",
                            Type = "E"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Бензин",
                            Type = "E"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Общественный транспорт",
                            Type = "E"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Такси",
                            Type = "E"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Посещение врача",
                            Type = "E"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Лекарства",
                            Type = "E"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Одежда",
                            Type = "E"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Учебное заведение",
                            Type = "E"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Образование(книги/курсы/т.п.)",
                            Type = "E"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Развлечение(кино/концерты/т.п.)",
                            Type = "E"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Личные расходы",
                            Type = "E"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Хобби",
                            Type = "E"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Красота и уход за собой",
                            Type = "E"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Проценты по кредитам",
                            Type = "E"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Подарки",
                            Type = "B"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(5192),
                            Name = "Другое",
                            Type = "B"
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.CategoryTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DoneAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("CategoryTransfers", t =>
                        {
                            t.HasCheckConstraint("CK_CategoryTransfer_Amount", "[Amount] > -100000 AND [Amount] < 100000 AND [Amount] <> 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 10000m,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(9043),
                            Description = "Описание 1",
                            DoneAt = new DateTime(2024, 1, 12, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(9043),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(9043),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 5000m,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(9043),
                            Description = "Описание 2",
                            DoneAt = new DateTime(2024, 1, 7, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(9043),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(9043),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = -1000m,
                            CategoryId = 12,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(9043),
                            Description = "Описание 3",
                            DoneAt = new DateTime(2024, 1, 2, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(9043),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(9043),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Amount = -800m,
                            CategoryId = 13,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(9043),
                            Description = "Описание 4",
                            DoneAt = new DateTime(2023, 12, 28, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(9043),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 68, DateTimeKind.Utc).AddTicks(9043),
                            UserId = 4
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserFromId")
                        .HasColumnType("int");

                    b.Property<int>("UserToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserToId");

                    b.HasIndex("UserFromId", "UserToId")
                        .IsUnique();

                    b.ToTable("Invitations", t =>
                        {
                            t.HasCheckConstraint("CK_Invitation_NotEqual", "[UserFromId] <> [UserToId]");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 69, DateTimeKind.Utc).AddTicks(4915),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 69, DateTimeKind.Utc).AddTicks(4915),
                            UserFromId = 4,
                            UserToId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 69, DateTimeKind.Utc).AddTicks(4915),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 69, DateTimeKind.Utc).AddTicks(4915),
                            UserFromId = 4,
                            UserToId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 69, DateTimeKind.Utc).AddTicks(4915),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 69, DateTimeKind.Utc).AddTicks(4915),
                            UserFromId = 1,
                            UserToId = 4
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(109),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(109),
                            Name = "TeamMember"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(109),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(109),
                            Name = "TeamLeader"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(109),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(109),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(2679),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(2679),
                            Name = "Группа 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(2679),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(2679),
                            Name = "Группа 2"
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccessTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CK_User_Balance", "[Balance] >= 0 AND [Balance] < 100000000");

                            t.HasCheckConstraint("CK_User_EmailFormat", "PATINDEX('%_@_%', [Email]) > 0");

                            t.HasCheckConstraint("CK_User_Gender", "[Gender] IN ('M', 'F')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 10000m,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(4688),
                            Email = "usikov_konstantin@mail.ru",
                            EmailConfirmed = true,
                            FirstName = "Константин",
                            Gender = "M",
                            IsRegistered = true,
                            LastName = "Усиков",
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(4688),
                            Password = "03D1F6545E6426DDEC4797280867E2F14593E0FB38DD6BF190773139DCE58D92:E1C74E1AEB5D8308D160474C6E2C274E:50000:SHA256",
                            TeamId = 1,
                            UserName = "Konstantin"
                        },
                        new
                        {
                            Id = 2,
                            Balance = 20000m,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(4688),
                            Email = "orlov_dmitry@yandex.ru",
                            EmailConfirmed = true,
                            FirstName = "Дмитрий",
                            Gender = "M",
                            IsRegistered = true,
                            LastName = "Орлов",
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(4688),
                            Password = "41998DC78F605A001090203007F3F7341D46BE392229F82263C753B712BB57D5:2365F9A998AE23EBC65EAB8BAD005458:50000:SHA256",
                            TeamId = 1,
                            UserName = "Dmitry"
                        },
                        new
                        {
                            Id = 3,
                            Balance = 30000m,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(4688),
                            Email = "ivanov_artyom@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Артем",
                            Gender = "M",
                            IsRegistered = true,
                            LastName = "Иванов",
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(4688),
                            Password = "AC74B05E1B544764C0E33E0D4574A5E29C629AF5D22394B7308789DE59F054F3:9FD58EBE4CB968212D9F0117466A77CC:50000:SHA256",
                            TeamId = 1,
                            UserName = "Artyom"
                        },
                        new
                        {
                            Id = 4,
                            Balance = 40000m,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(4688),
                            Email = "smirnova_maria@mail.ru",
                            EmailConfirmed = true,
                            FirstName = "Мария",
                            Gender = "F",
                            IsRegistered = true,
                            LastName = "Смирнова",
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 73, DateTimeKind.Utc).AddTicks(4688),
                            Password = "D9507B7FD5AF9880B37D6926354AB29CA7B313891BE5A3E9B851A4BF6E32BDCD:0E08FF50E2205404163CE192B957FA60:50000:SHA256",
                            TeamId = 2,
                            UserName = "Maria"
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(955),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(955)
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(955),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(955)
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(955),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(955)
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(955),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(955)
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.UserTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(7,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DoneAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserFromId")
                        .HasColumnType("int");

                    b.Property<int>("UserToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("UserTransfers", t =>
                        {
                            t.HasCheckConstraint("CK_UserTransfer_Amount", "[Amount] > 0 AND [Amount] < 100000");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 250m,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(9730),
                            Description = "Описание 1",
                            DoneAt = new DateTime(2024, 1, 12, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(9730),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(9730),
                            UserFromId = 1,
                            UserToId = 2
                        },
                        new
                        {
                            Id = 2,
                            Amount = 500m,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(9730),
                            Description = "Описание 2",
                            DoneAt = new DateTime(2024, 1, 7, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(9730),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(9730),
                            UserFromId = 4,
                            UserToId = 3
                        },
                        new
                        {
                            Id = 3,
                            Amount = 700m,
                            CreatedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(9730),
                            Description = "Описание 3",
                            DoneAt = new DateTime(2024, 1, 2, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(9730),
                            ModifiedAt = new DateTime(2024, 1, 17, 8, 19, 34, 74, DateTimeKind.Utc).AddTicks(9730),
                            UserFromId = 4,
                            UserToId = 1
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.CategoryTransfer", b =>
                {
                    b.HasOne("FinanceManager.Domain.Category", "Category")
                        .WithMany("CategoryTransfers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceManager.Domain.User", "User")
                        .WithMany("CategoryTransfers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceManager.Domain.Invitation", b =>
                {
                    b.HasOne("FinanceManager.Domain.User", "UserFrom")
                        .WithMany("InvitationsFrom")
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceManager.Domain.User", "UserTo")
                        .WithMany("InvitationsTo")
                        .HasForeignKey("UserToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("FinanceManager.Domain.User", b =>
                {
                    b.HasOne("FinanceManager.Domain.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FinanceManager.Domain.UserRole", b =>
                {
                    b.HasOne("FinanceManager.Domain.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceManager.Domain.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceManager.Domain.UserTransfer", b =>
                {
                    b.HasOne("FinanceManager.Domain.User", "UserFrom")
                        .WithMany("UserTransfersFrom")
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceManager.Domain.User", "UserTo")
                        .WithMany("UserTransfersTo")
                        .HasForeignKey("UserToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("FinanceManager.Domain.Category", b =>
                {
                    b.Navigation("CategoryTransfers");
                });

            modelBuilder.Entity("FinanceManager.Domain.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FinanceManager.Domain.Team", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FinanceManager.Domain.User", b =>
                {
                    b.Navigation("CategoryTransfers");

                    b.Navigation("InvitationsFrom");

                    b.Navigation("InvitationsTo");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTransfersFrom");

                    b.Navigation("UserTransfersTo");
                });
#pragma warning restore 612, 618
        }
    }
}
