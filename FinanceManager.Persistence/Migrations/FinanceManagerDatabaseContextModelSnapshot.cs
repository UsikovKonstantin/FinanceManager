// <auto-generated />
using System;
using FinanceManager.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinanceManager.Persistence.Migrations
{
    [DbContext(typeof(FinanceManagerDatabaseContext))]
    partial class FinanceManagerDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinanceManager.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", t =>
                        {
                            t.HasCheckConstraint("CK_Category_Type", "[Type] IN ('I', 'E', 'B')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Заработная плата",
                            Type = "I"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Премия",
                            Type = "I"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Пенсия",
                            Type = "I"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Продуктовый магазин",
                            Type = "E"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Хозтовары",
                            Type = "E"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Подписка на музыкальный сервис",
                            Type = "E"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Магазин электроники",
                            Type = "E"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Магазин сантехники",
                            Type = "E"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Кафе/Ресторан",
                            Type = "E"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Услуги ЖКХ",
                            Type = "E"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Бензин",
                            Type = "E"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Общественный транспорт",
                            Type = "E"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Такси",
                            Type = "E"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Посещение врача",
                            Type = "E"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Лекарства",
                            Type = "E"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Одежда",
                            Type = "E"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Учебное заведение",
                            Type = "E"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Образование(книги/курсы/т.п.)",
                            Type = "E"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Развлечение(кино/концерты/т.п.)",
                            Type = "E"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Личные расходы",
                            Type = "E"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Хобби",
                            Type = "E"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Красота и уход за собой",
                            Type = "E"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Проценты по кредитам",
                            Type = "E"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Подарки",
                            Type = "B"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(4980),
                            Name = "Другое",
                            Type = "B"
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.CategoryTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DoneAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("CategoryTransfers", t =>
                        {
                            t.HasCheckConstraint("CK_CategoryTransfer_Amount", "[Amount] > -100000 AND [Amount] < 100000 AND [Amount] <> 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 10000m,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(8909),
                            Description = "Описание 1",
                            DoneAt = new DateTime(2024, 1, 13, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(8909),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(8909),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 5000m,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(8909),
                            Description = "Описание 2",
                            DoneAt = new DateTime(2024, 1, 8, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(8909),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(8909),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = -1000m,
                            CategoryId = 12,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(8909),
                            Description = "Описание 3",
                            DoneAt = new DateTime(2024, 1, 3, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(8909),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(8909),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Amount = -800m,
                            CategoryId = 13,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(8909),
                            Description = "Описание 4",
                            DoneAt = new DateTime(2023, 12, 29, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(8909),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 131, DateTimeKind.Utc).AddTicks(8909),
                            UserId = 4
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserFromId")
                        .HasColumnType("int");

                    b.Property<int>("UserToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserToId");

                    b.HasIndex("UserFromId", "UserToId")
                        .IsUnique();

                    b.ToTable("Invitations", t =>
                        {
                            t.HasCheckConstraint("CK_Invitation_NotEqual", "[UserFromId] <> [UserToId]");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 132, DateTimeKind.Utc).AddTicks(4952),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 132, DateTimeKind.Utc).AddTicks(4952),
                            UserFromId = 4,
                            UserToId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 132, DateTimeKind.Utc).AddTicks(4952),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 132, DateTimeKind.Utc).AddTicks(4952),
                            UserFromId = 4,
                            UserToId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 132, DateTimeKind.Utc).AddTicks(4952),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 132, DateTimeKind.Utc).AddTicks(4952),
                            UserFromId = 1,
                            UserToId = 4
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 136, DateTimeKind.Utc).AddTicks(5410),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 136, DateTimeKind.Utc).AddTicks(5410),
                            Name = "TeamMember"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 136, DateTimeKind.Utc).AddTicks(5410),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 136, DateTimeKind.Utc).AddTicks(5410),
                            Name = "TeamLeader"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 136, DateTimeKind.Utc).AddTicks(5410),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 136, DateTimeKind.Utc).AddTicks(5410),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 136, DateTimeKind.Utc).AddTicks(8389),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 136, DateTimeKind.Utc).AddTicks(8389),
                            Name = "Группа 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 136, DateTimeKind.Utc).AddTicks(8389),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 136, DateTimeKind.Utc).AddTicks(8389),
                            Name = "Группа 2"
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ChangeEmailToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ChangeEmailTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RefreshTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RegistrationTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetPasswordToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ResetPasswordTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CK_User_Balance", "[Balance] >= 0 AND [Balance] < 100000000");

                            t.HasCheckConstraint("CK_User_EmailFormat", "PATINDEX('%_@_%', [Email]) > 0");

                            t.HasCheckConstraint("CK_User_Gender", "[Gender] IN ('M', 'F')");

                            t.HasCheckConstraint("CK_User_NewEmailFormat", "PATINDEX('%_@_%', [NewEmail]) > 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 10000m,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(552),
                            Email = "usikov_konstantin@mail.ru",
                            FirstName = "Константин",
                            Gender = "M",
                            IsRegistered = true,
                            LastName = "Усиков",
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(552),
                            Password = "46BDA4F3691DF3493E8931985FB2073986231F597BD8D1841FFE919CA670EB06:D7A6746090E449C64C85B60FADAE5D2F:50000:SHA256",
                            TeamId = 1,
                            UserName = "Konstantin1"
                        },
                        new
                        {
                            Id = 2,
                            Balance = 20000m,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(552),
                            Email = "orlov_dmitry@yandex.ru",
                            FirstName = "Дмитрий",
                            Gender = "M",
                            IsRegistered = true,
                            LastName = "Орлов",
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(552),
                            Password = "F77753025D17913EE058E04AC3A62373A4F8564FCEE7C5DC4AD3F1A419238B4E:6641B1A3A8BADF1A30F307179A9A5C0A:50000:SHA256",
                            TeamId = 1,
                            UserName = "Dmitry1"
                        },
                        new
                        {
                            Id = 3,
                            Balance = 30000m,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(552),
                            Email = "ivanov_artyom@gmail.com",
                            FirstName = "Артем",
                            Gender = "M",
                            IsRegistered = true,
                            LastName = "Иванов",
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(552),
                            Password = "39E7BE9C0432F76FF7E239D3C8C9313270BF2CDC1D5EBDA0474C241F52387CC8:368AEC1394165D87754905CECD02A369:50000:SHA256",
                            TeamId = 1,
                            UserName = "Artyom1"
                        },
                        new
                        {
                            Id = 4,
                            Balance = 40000m,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(552),
                            Email = "smirnova_maria@mail.ru",
                            FirstName = "Мария",
                            Gender = "F",
                            IsRegistered = true,
                            LastName = "Смирнова",
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(552),
                            Password = "593652F3B10EE726A804C7B74C8C5A5A9E0C7F1E4E135BF1414E92CA5EE6EEFC:FE38DEBEE0E9CC245B5BE4BBC4A0918C:50000:SHA256",
                            TeamId = 2,
                            UserName = "Maria1"
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 2,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(7439),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(7439)
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(7439),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(7439)
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(7439),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(7439)
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(7439),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 137, DateTimeKind.Utc).AddTicks(7439)
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.UserTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(7,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DoneAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserFromId")
                        .HasColumnType("int");

                    b.Property<int>("UserToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("UserTransfers", t =>
                        {
                            t.HasCheckConstraint("CK_UserTransfer_Amount", "[Amount] > 0 AND [Amount] < 100000");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 250m,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 138, DateTimeKind.Utc).AddTicks(7757),
                            Description = "Описание 1",
                            DoneAt = new DateTime(2024, 1, 13, 11, 8, 17, 138, DateTimeKind.Utc).AddTicks(7757),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 138, DateTimeKind.Utc).AddTicks(7757),
                            UserFromId = 1,
                            UserToId = 2
                        },
                        new
                        {
                            Id = 2,
                            Amount = 500m,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 138, DateTimeKind.Utc).AddTicks(7757),
                            Description = "Описание 2",
                            DoneAt = new DateTime(2024, 1, 8, 11, 8, 17, 138, DateTimeKind.Utc).AddTicks(7757),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 138, DateTimeKind.Utc).AddTicks(7757),
                            UserFromId = 4,
                            UserToId = 3
                        },
                        new
                        {
                            Id = 3,
                            Amount = 700m,
                            CreatedAt = new DateTime(2024, 1, 18, 11, 8, 17, 138, DateTimeKind.Utc).AddTicks(7757),
                            Description = "Описание 3",
                            DoneAt = new DateTime(2024, 1, 3, 11, 8, 17, 138, DateTimeKind.Utc).AddTicks(7757),
                            ModifiedAt = new DateTime(2024, 1, 18, 11, 8, 17, 138, DateTimeKind.Utc).AddTicks(7757),
                            UserFromId = 4,
                            UserToId = 1
                        });
                });

            modelBuilder.Entity("FinanceManager.Domain.CategoryTransfer", b =>
                {
                    b.HasOne("FinanceManager.Domain.Category", "Category")
                        .WithMany("CategoryTransfers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceManager.Domain.User", "User")
                        .WithMany("CategoryTransfers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceManager.Domain.Invitation", b =>
                {
                    b.HasOne("FinanceManager.Domain.User", "UserFrom")
                        .WithMany("InvitationsFrom")
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceManager.Domain.User", "UserTo")
                        .WithMany("InvitationsTo")
                        .HasForeignKey("UserToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("FinanceManager.Domain.User", b =>
                {
                    b.HasOne("FinanceManager.Domain.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FinanceManager.Domain.UserRole", b =>
                {
                    b.HasOne("FinanceManager.Domain.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceManager.Domain.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceManager.Domain.UserTransfer", b =>
                {
                    b.HasOne("FinanceManager.Domain.User", "UserFrom")
                        .WithMany("UserTransfersFrom")
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceManager.Domain.User", "UserTo")
                        .WithMany("UserTransfersTo")
                        .HasForeignKey("UserToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("FinanceManager.Domain.Category", b =>
                {
                    b.Navigation("CategoryTransfers");
                });

            modelBuilder.Entity("FinanceManager.Domain.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FinanceManager.Domain.Team", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FinanceManager.Domain.User", b =>
                {
                    b.Navigation("CategoryTransfers");

                    b.Navigation("InvitationsFrom");

                    b.Navigation("InvitationsTo");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTransfersFrom");

                    b.Navigation("UserTransfersTo");
                });
#pragma warning restore 612, 618
        }
    }
}
